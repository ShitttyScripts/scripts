#!/bin/bash

# Change mac location through Self Service Policy
# jjourney 07/2016

## Updates::
# 10/2016 added a loop to check credentials

###### Variables ######
# System
CocoaD="/Library/$company/CD/CocoaDialog.app/Contents/MacOS/CocoaDialog"
computerName="$(scutil --get ComputerName)"
serialNumber="$(system_profiler SPHardwareDataType | awk '/Serial/ {print $4}')"
jamfHelper="/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper"
jamfBin="/usr/local/jamf/bin/jamf"

# JSS
jss="https://your.jss.here:8443"
CD2_trigger="polCocoaDialog"
AD="your.domain.here"

# Department, overwrites if another department is specified later.
apiDeptData="<computer><location><department/></location></computer>"


###### Exit if CD not found ######
# Will try and download policy with trigger listed
i=1
while [[ ! -f "$CocoaD" ]] && [[ $i -ne 4 ]]
do
    "$jamfHelper" \
        -windowType hud \
        -alignDescription center \
        -title "Error" \
        -description "Dependencies not found with install. Try number $i to download dependencies..." \
        -lockHUD \
        -timeout 10 \
        -countdown
    $jamfBin policy -trigger "$CD2_trigger"
    i=$(( $i + 1 ))
done

if [[ $i -eq 4 ]]; then
    "$jamfHelper" \
        -windowType hud \
        -alignDescription center \
        -title "Error" \
        -description "Dependencies not able to be downloaded. Please contact your administrator" \
        -button1 "OK" \
        -lockHUD
    exit 1
fi

## Set up loop for username/password check
e=1
while [[ $e -ne 2 ]]
do
###### User info ######
# Get Username
username_Full="$($CocoaD \
    standard-inputbox \
    --title "$AD ID: API" \
    --informative-text "Please enter your $AD ID." \
    --empty-text "Please type in your $AD before clicking OK." \
    --button1 "OK" \
    --button2 "Cancel" \
    --float \
    --string-output \
    )"
if [[ "$username_Full" =~ "Cancel" ]]; then
    exit 0
    echo "user cancelled"
fi
username=${username_Full:3}

# Get Password
password_Full="$($CocoaD \
    secure-inputbox \
    --title "$AD Password: API" \
    --informative-text "Please enter your $AD Password" \
    --empty-text "Please type in your $AD Password before clicking OK." \
    --button1 "OK" \
    --button2 "Cancel" \
    --float \
    --string-output \
    )"
if [[ "$password_Full" =~ "Cancel" ]]; then
    exit 0
    echo "user cancelled"
fi
password=${password_Full:3}

# Get computer name/check JSS connection
oldName="$(curl \
    -s \
    -u \
    $username:$password \
    -X GET $jss/JSSResource/computers/serialnumber/$serialNumber \
    -H "Accept: application/xml" \
    | xpath //computer/general/name[1] \
    | sed -e 's/<name>//;s/<\/name>//' \
    )"
# if yes, continue
if [ -z "$oldName" ]; then
error_full="$($CocoaD \
        ok-msgbox \
        --title "Error Connecting to JSS" \
        --text "Error" \
        --informative-text "There seems to be an issue connecting to JSS." \
        --button1 "OK" \
        --button2 "Cancel" \
        --float \
        --string-output \
        )"
    if [[ "$error_full" =~ "Cancel" ]]; then
        exit 0
        echo "user cancelled"
    else
        # loop again
        continue
    fi
fi
e=2
done    
        
#### changing computer name ######
# Enter new computer name
newComputerName="$($CocoaD \
    standard-inputbox \
    --title "New Name" \
    --informative-text "Please enter the new Name:" \
    --text "$oldName" \
    --button1 "OK" \
    --button2 "Cancel" \
    --float \
    --value-required \
    --string-output \
    )"
if [[ "$newComputerName" =~ "Cancel" ]]; then
    exit 0
    echo "user cancelled"
fi
newComputerName=${newComputerName:3}
# Make sure there is no space (" ") 
pattern=" |'"
while [[ -z "$newComputerName" || "$newComputerName" =~ $pattern ]]
    do
    newComputerName="$($CocoaD \
    standard-inputbox \
    --title "New Name" \
    --informative-text "Cannot contain a space or be blank, please enter the new name:" \
    --text "$oldName" \
    --empty-text "$oldName" \
    --button1 "OK" \
    --button2 "Cancel" \
    --float \
    --value-required \
    --string-output \
    )"
    if [[ "$newComputerName" =~ "Cancel" ]]; then
        exit 0
        echo "user cancelled"
    fi  
        newComputerName=${newComputerName:3}
done

# set apiData
apiData="<computer><general><name>$newComputerName</name></general></computer>"

# Final PUT command, updating new Name
curl \
    -s \
    -u \
    $username:$password \
    -X PUT \
    -H "Content-Type: text/xml" \
    -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>$apiData" $jss/JSSResource/computers/serialnumber/$serialNumber
    
# Change variable
computerName="$newComputerName"
    
# Run policy to have it update
sudo jamf policy -trigger polForceName

# New Check
checkName="$(curl \
    -s \
    -u $username:$password \
    -X GET $jss/JSSResource/computers/serialnumber/$serialNumber \
    -H "Accept: application/xml" \
    | xpath //computer/general/name[1] \
    | sed -e 's/<name>//;s/<\/name>//' \
    )"

# Display newest Name
$CocoaD \
    ok-msgbox \
    --title "Computer Name" \
    --text "$checkName" \
    --informative-text "The new name is $checkName." \
    --float \
    --no-cancel

## Get all Buildings
allBuildings="$(curl \
    -s \
    -v \
    -u $username:$password \
    -X GET $jss/JSSResource/buildings \
    -H "Accept: application/xml" \
    )"
    
BuildingList="$(echo $allBuildings \
    | xpath "/buildings/building/name" \
    |sed -e 's/<name>//g;s/<\/name>/ /g' \
    )"

# Enter user's building information
userBuilding="$($CocoaD \
    standard-dropdown \
    --string-output \
    --title "Choose Building" \
    --text "Make a selection below:" \
    --items $BuildingList \
    --float \
    )"
if [[ "$userBuilding" =~ "Cancel" ]]; then
    exit 0
    echo "user cancelled"
fi
Building=${userBuilding:3}

# Fix underscores
    if [[ "$Building" =~ "_" ]]; then
        Building="$(echo $Building | sed -e 's/_/ /g')"
    fi

# Building data
apiBuildingData="$(echo "<computer><location><building><name>$Building</name></building></location></computer>")"

# PUT command, updating building
curl \
    -s \
    -u $username:$password \
    -X PUT \
    -H "Content-Type: text/xml" \
    -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>$apiBuildingData" $jss/JSSResource/computers/serialnumber/$serialNumber
# PUT command, updating department
curl \
    -s \
    -u $username:$password \
    -X PUT \
    -H "Content-Type: text/xml" \
    -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>$apiDeptData" $jss/JSSResource/computers/serialnumber/$serialNumber

# New Check
checkBuilding="$(curl \
    -s \
    -u $username:$password \
    -X GET $jss/JSSResource/computers/serialnumber/$serialNumber \
    -H "Accept: application/xml" \
    | xpath //computer/location/building[1] \
    | sed -e 's/<building>//;s/<\/building>//' \
    )"

# Display newest Name
displayNewName="$($CocoaD \
    ok-msgbox \
    --title "Complete" \
    --text "New Building Name" \
    --informative-text "The new building name is $checkBuilding" \
    --float \
    )"

exit 0
